#------------------------------------------------------------------------------
name: Godot CI
#------------------------------------------------------------------------------
# Workflow conditions
on:
  push:
    branches:
      - master
      - dev
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10      
  pull_request:
    branches:
      - '*'
  release:
    types: [published]
#------------------------------------------------------------------------------
env:
  GODOT_VERSION: 3.2.3
  PROJECT_PATH: .
  EXPORT_NAME: ActionRPG
#------------------------------------------------------------------------------
jobs:      
  #----------------------------------------------------------------------------
  export-windows:
    name: Windows Export 🏢
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.2.3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Setup Export Templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      # godot export  uses relative paths to the project path!
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          cd $PROJECT_PATH
          godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
          echo "::set-output name=test::hello"

      - name: Upload Artifact
        if: github.ref != 'refs/heads/dev'
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: build/windows
          retention-days: 7
  #----------------------------------------------------------------------------
  export-linux:
    name: Linux Export 🐧
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.2.3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Setup Export Templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      # godot export  uses relative paths to the project path!
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          cd $PROJECT_PATH
          godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64

      - name: Upload Artifact
        if: github.ref != 'refs/heads/dev'
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: build/linux
          retention-days: 7          
  #----------------------------------------------------------------------------
  export-web:
    name: Web Export 💠
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.2.3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Setup Export Tempaltes
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      - name: Web Build
        run: |
          mkdir -v -p build/html5
          cd $PROJECT_PATH
          godot -v --export "HTML5" ./build/html5/index.html

      - name: Upload Artifact
        if: github.ref != 'refs/heads/dev'      
        uses: actions/upload-artifact@v2
        with:
          name: html5
          path: build/html5
          retention-days: 7 

      # Installing rsync is needed in order to deploy to GitHub Pages. Without it, the build will fail.
      - name: Install rsync 📚
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          apt-get update && apt-get install -y rsync

      - name: Deploy to GitHub Pages 🚀
        if: startsWith(github.ref, 'refs/tags/v')
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: html5 # The branch the action should deploy to.
          FOLDER: build/html5 # The folder the action should deploy.
  #----------------------------------------------------------------------------
  export-mac:
    name: Mac Export 🍎
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.2.3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Setup Repository
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      # godot export  uses relative paths to the project path!
      - name: Mac Build
        run: |
          mkdir -v -p build/mac
          cd $PROJECT_PATH
          godot -v --export "Mac OSX" ./build/mac/$EXPORT_NAME.zip

      - name: Upload Artifact
        if: github.ref != 'refs/heads/dev'
        uses: actions/upload-artifact@v2
        with:
          name: mac
          path: build/mac
          retention-days: 7                           
  #----------------------------------------------------------------------------   
  release-notes:
    name: Release Notes 📰
    needs: [export-windows, export-linux, export-web, export-mac]    
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true  
          fetch-depth: 0

      # Check 2 most recent tags, overwrites
      - name: Tagged Release Notes    
        run: |
          scripts/notes_release.sh `git tag | tail -n2 | head -n1` `git tag | tail -n1` > release-notes.md           

      - name: Upload Artifact          
        uses: actions/upload-artifact@v2
        with:
          name: Release Notes
          path: release-notes.md
          retention-days: 7             
  #---------------------------------------------------------------------------- 
  tagged-release:
    name: Tagged Release 
    needs: [release-notes]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:

      - name: Download Release Notes
        uses: actions/download-artifact@v2
        with:
          name: release-notes.md

      - name: Download Windows Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows

      - name: Zip Windows Artifact
        run: |
          zip -r windows.zip ActionRPG*
          ls -l

      - name: Download HTML5 Artifact
        uses: actions/download-artifact@v2
        with:
          name: html5

      - name: Organize HTML5 Artifact
        run: |
          zip -r html.zip index* favicon*
          ls -l

      - name: Download Linux Artifact
        uses: actions/download-artifact@v2
        with:
          name: linux

      - name: Organize Linux Artifact
        run: |
          zip -r linux.zip ActionRPG*
          ls -l       

      - name: Download Mac Artifact
        uses: actions/download-artifact@v2
        with:
          name: mac  


      - name: Zip Mac Artifact
        run: |
          mv ActionRPG.zip mac.zip
          ls -l                 

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Windows Asset
        id: upload-windows-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip      

      - name: Upload Linux Asset
        id: upload-linux-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip           

      - name: Upload HTML5 Assets
        id: upload-html5-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./html.zip
          asset_name: html.zip
          asset_content_type: application/zip   

      - name: Upload Mac Assets
        id: upload-mac-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mac.zip
          asset_name: mac.zip
          asset_content_type: application/zip                           